{"version":3,"file":"auth.controller.js","names":["_utils","_interopRequireDefault","require","googleAuthCallback","exports","_ref","_asyncToGenerator2","_regenerator","mark","_callee","accessToken","refreshToken","profile","done","userEmail","results","newUser","insertedUser","wrap","_callee$","_context","prev","next","emails","value","query","sent","length","abrupt","email","name","displayName","t0","stop","_x","_x2","_x3","_x4","apply","arguments","serializeUser","user","id","deserializeUser","_ref2","_callee2","_callee2$","_context2","_x5","_x6"],"sources":["../../controllers/auth.controller.js"],"sourcesContent":["// query is mySQL db sending commands to user table.\nimport query from \"../db/utils\";\n\n// Google OAuth callback function\nexport const googleAuthCallback = async (\n  accessToken,\n  refreshToken,\n  profile,\n  done\n) => {\n  const userEmail = profile.emails[0].value;\n\n  try {\n    // Check if user exists\n    const results = await query(\"SELECT * FROM users WHERE email = ?\", [\n      userEmail,\n    ]);\n\n    if (results.length > 0) {\n      return done(null, results[0]);\n    } else {\n      const newUser = { email: userEmail, name: profile.displayName };\n      await query(\"INSERT INTO users SET ?\", newUser);\n      const insertedUser = await query(\"SELECT * FROM users WHERE email = ?\", [\n        userEmail,\n      ]);\n      return done(null, insertedUser[0]);\n    }\n  } catch (err) {\n    return done(err);\n  }\n};\n\n// Serialize and deserialize user functions\nexport const serializeUser = (user, done) => {\n  done(null, user.id); // Use user.id to identify the user\n};\n\nexport const deserializeUser = async (id, done) => {\n  try {\n    const user = await query(\"SELECT * FROM users WHERE id = ?\", [id]);\n    done(null, user[0]); // Pass the user object to the session\n  } catch (err) {\n    done(err);\n  }\n};\n"],"mappings":"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","ignoreList":[]}