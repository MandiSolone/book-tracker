{"version":3,"file":"auth.routes.js","names":["express","passport","AuthRouter","Router","redirectUrl","process","env","CLIENT_URL","get","authenticate","scope","failureRedirect","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","req","res","wrap","_callee$","_context","prev","next","user","console","error","abrupt","redirect","stop","_x","_x2","apply","arguments","_ref2","_callee2","_callee2$","_context2","isAuthenticated","json","warn","status","message","_x3","_x4","post","logout","err","session"],"sources":["../../routes/auth.routes.js"],"sourcesContent":["// Using Google OAuth to sign in\nimport express from \"express\";\nimport passport from \"passport\"; // Used Passport Library - middleware for handling authentication\n\nconst AuthRouter = express.Router();\n\nconst redirectUrl = process.env.CLIENT_URL || \"http://localhost:8080/\"; // Use the environment variable\n\n// Redirect to Google for authentication\nAuthRouter.get(\n  \"/google\",\n  passport.authenticate(\"google\", {\n    scope: [\"profile\", \"email\"],\n  })\n);\n\n// Callback route for Google to redirect to\nAuthRouter.get(\n  \"/google/callback\",\n  passport.authenticate(\"google\", { failureRedirect: \"/\" }),\n  async (req, res) => {\n    if (!req.user) {\n      console.error(\"google/callback Authentication failed, no user returned.\");\n      return res.redirect(\"/\"); // Redirect if authentication fails\n    }\n\n    res.redirect(redirectUrl); // Redirect to the account/home page (Client side) after auth\n  }\n);\n\n// User profile route\nAuthRouter.get(\"/profile\", async (req, res) => {\n  if (req.isAuthenticated()) {\n    res.json(req.user); // Return the authenticated user\n  } else {\n    console.warn(\"/profile - User not authenticated, sending 401 response\");\n    res.status(401).json({ message: \"User not authenticated\" });\n  }\n});\n\n// Logout endpoint\nAuthRouter.post(\"/logout\", (req, res) => {\n  req.logout((err) => {\n    if (err) return next(err);\n    req.session = null; // Clear session data\n    res.redirect(\"/loggedout\"); // Redirect after logout\n  });\n});\n\nexport default AuthRouter;\n"],"mappings":"sIAAA;AACA,OAAOA,OAAO,MAAM,SAAS;AAC7B,OAAOC,QAAQ,MAAM,UAAU,CAAC,CAAC;;AAEjC,IAAMC,UAAU,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;;AAEnC,IAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,IAAI,wBAAwB,CAAC,CAAC;;AAExE;AACAL,UAAU,CAACM,GAAG;EACZ,SAAS;EACTP,QAAQ,CAACQ,YAAY,CAAC,QAAQ,EAAE;IAC9BC,KAAK,EAAE,CAAC,SAAS,EAAE,OAAO;EAC5B,CAAC;AACH,CAAC;;AAED;AACAR,UAAU,CAACM,GAAG;EACZ,kBAAkB;EAClBP,QAAQ,CAACQ,YAAY,CAAC,QAAQ,EAAE,EAAEE,eAAe,EAAE,GAAG,CAAC,CAAC,CAAC,gCAAAC,IAAA,GAAAC,iBAAA,cAAAC,mBAAA,CAAAC,IAAA;MACzD,SAAAC,QAAOC,GAAG,EAAEC,GAAG,UAAAJ,mBAAA,CAAAK,IAAA,UAAAC,SAAAC,QAAA,qBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;cACRN,GAAG,CAACO,IAAI,GAAAH,QAAA,CAAAE,IAAA;cACXE,OAAO,CAACC,KAAK,CAAC,0DAA0D,CAAC,CAAC,OAAAL,QAAA,CAAAM,MAAA;cACnET,GAAG,CAACU,QAAQ,CAAC,GAAG,CAAC;;;cAG1BV,GAAG,CAACU,QAAQ,CAACxB,WAAW,CAAC,CAAC,CAAC;YAAA,yBAAAiB,QAAA,CAAAQ,IAAA,OAAAb,OAAA,GAC5B,oBAAAc,EAAA,EAAAC,GAAA,UAAAnB,IAAA,CAAAoB,KAAA,OAAAC,SAAA;AACH,CAAC;;AAED;AACA/B,UAAU,CAACM,GAAG,CAAC,UAAU,gCAAA0B,KAAA,GAAArB,iBAAA,cAAAC,mBAAA,CAAAC,IAAA,CAAE,SAAAoB,SAAOlB,GAAG,EAAEC,GAAG,UAAAJ,mBAAA,CAAAK,IAAA,UAAAiB,UAAAC,SAAA,qBAAAA,SAAA,CAAAf,IAAA,GAAAe,SAAA,CAAAd,IAAA;UACxC,IAAIN,GAAG,CAACqB,eAAe,CAAC,CAAC,EAAE;YACzBpB,GAAG,CAACqB,IAAI,CAACtB,GAAG,CAACO,IAAI,CAAC,CAAC,CAAC;UACtB,CAAC,MAAM;YACLC,OAAO,CAACe,IAAI,CAAC,yDAAyD,CAAC;YACvEtB,GAAG,CAACuB,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC,EAAEG,OAAO,EAAE,wBAAwB,CAAC,CAAC,CAAC;UAC7D,CAAC,yBAAAL,SAAA,CAAAR,IAAA,OAAAM,QAAA,GACF,oBAAAQ,GAAA,EAAAC,GAAA,UAAAV,KAAA,CAAAF,KAAA,OAAAC,SAAA;AAAA,CAAC;;AAEF;AACA/B,UAAU,CAAC2C,IAAI,CAAC,SAAS,EAAE,UAAC5B,GAAG,EAAEC,GAAG,EAAK;EACvCD,GAAG,CAAC6B,MAAM,CAAC,UAACC,GAAG,EAAK;IAClB,IAAIA,GAAG,EAAE,OAAOxB,IAAI,CAACwB,GAAG,CAAC;IACzB9B,GAAG,CAAC+B,OAAO,GAAG,IAAI,CAAC,CAAC;IACpB9B,GAAG,CAACU,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;EAC9B,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF,eAAe1B,UAAU","ignoreList":[]}