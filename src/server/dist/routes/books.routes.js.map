{"version":3,"file":"books.routes.js","names":["_express","_interopRequireDefault","require","_books","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","BooksRouter","express","Router","get","_ref","_asyncToGenerator2","_regenerator","mark","_callee","req","res","next","userId","book_id","formatBookData","data","booksList","wrap","_callee$","_context","prev","isAuthenticated","abrupt","status","json","message","user","id","params","book","user_id","title","authors","comments","link","image","google_id","type","location","rating","books","findOne","sent","findAll","map","t0","console","error","stop","_x","_x2","_x3","post","_ref2","_callee2","newBook","bookWithUserId","_callee2$","_context2","body","addOne","_x4","_x5","_x6","_ref3","_callee3","_callee3$","_context3","removeOne","_x7","_x8","_x9","put","_ref4","_callee4","updatedBook","updatedResult","_callee4$","_context4","updateOne","affectedRows","split","_x10","_x11","_x12","_default","exports"],"sources":["../../routes/books.routes.js"],"sourcesContent":["import express from \"express\";\nimport books from \"../controllers/books.controllers\";\n\n// Requests will reach these routes already matching /api/books\nconst BooksRouter = express.Router();\n\n//? means id is optional\nBooksRouter.get(\"/:book_id?\", async (req, res, next) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"User not authenticated\" });\n  }\n  const userId = req.user.id; // This comes from the session/auth middleware\n  const { book_id } = req.params;\n\n  try {\n    const formatBookData = (book) => ({\n      book_id: book.book_id,\n      user_id: book.user_id,\n      title: book.title,\n      authors: book.authors,\n      comments: book.comments,\n      link: book.link,\n      image: book.image,\n      google_id: book.google_id,\n      type: book.type,\n      location: book.location,\n      status: book.status,\n      rating: book.rating,\n    });\n\n    if (book_id) {\n      const data = await books.findOne(book_id, userId);\n      if (!data) {\n        return res.status(404).json({ message: \"Book not found\" });\n      }\n      return res.json(formatBookData(data));\n    } else {\n      const booksList = await books.findAll({ user_id: userId }); // Fetch books for the authenticated user\n      return res.json(booksList.map(formatBookData));\n    }\n  } catch (err) {\n    console.error(\"Error fetching book data:\", err);\n    return next(err);\n  }\n});\n\nBooksRouter.post(\"/\", async (req, res, next) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"User not authenticated\" });\n  }\n  const userId = req.user.id;\n  const newBook = req.body;\n\n  try {\n    // Include user_id in the book data\n    const bookWithUserId = {\n      ...newBook,\n      user_id: userId, // Add the user ID to the new book data\n    };\n\n    let data = await books.addOne(bookWithUserId); // Pass newBook to addOne\n\n    res.status(201).json({\n      id: data.book_id,\n      title: data.title,\n      user_id: data.user_id,\n      authors: data.authors || [],\n      comments: data.comments,\n      link: data.link,\n      image: data.image,\n      google_id: data.google_id,\n      type: data.type,\n      location: data.location,\n      status: data.status,\n      rating: data.rating,\n    });\n  } catch (err) {\n    next(err);\n  }\n});\n\nBooksRouter.delete(\"/:book_id\", async (req, res, next) => {\n  try {\n    let { book_id } = req.params;\n    await books.removeOne(book_id);\n    res.json({ message: \"Book deleted\", book_id });\n  } catch (err) {\n    next(err);\n  }\n});\n\nBooksRouter.put(\"/:book_id\", async (req, res, next) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"User not authenticated\" });\n  }\n  const userId = req.user.id;\n  const updatedBook = req.body; // Get updated book data from request body\n  const { book_id } = req.params; // Extract book_id from request param\n\n  try {\n    // Update the book in the database\n    const updatedResult = await books.updateOne(updatedBook, book_id, userId); // Pass updatedBook directly\n\n    // Check if the update was successful\n    if (!updatedResult.affectedRows) {\n      return res\n        .status(404)\n        .json({ message: \"Book not found or no changes made.\" });\n    }\n\n    // Respond with the updated book data\n    res.json({\n      id: updatedResult.book_id,\n      user_id: updatedResult.user_id,\n      title: updatedResult.title,\n      authors: updatedResult.authors ? updatedResult.authors.split(\", \") : [], // split works as input if a string\n      comments: updatedResult.comments,\n      link: updatedResult.link,\n      image: updatedResult.image,\n      google_id: updatedResult.google_id,\n      type: updatedResult.type,\n      location: updatedResult.location,\n      status: updatedResult.status,\n      rating: updatedResult.rating,\n    });\n  } catch (err) {\n    console.error(err);\n    next(err);\n  }\n});\n\nexport default BooksRouter;\n"],"mappings":"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","ignoreList":[]}