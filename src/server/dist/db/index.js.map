{"version":3,"file":"index.js","names":["config","mysql","url","connection","process","env","NODE_ENV","clearDBUrl","CLEARDB_DATABASE_URL","console","error","Error","_url","URL","hostname","username","password","pathname","database","slice","createPool","host","user","getConnection","err","conn","log","release"],"sources":["../../db/index.js"],"sourcesContent":["import config from \"../config/index.js\"; // local config file\nimport mysql from \"mysql\"; // Default built in component\nimport url from \"url\"; // URL module for parsing, built in Node mod\n\nlet connection;\n\nif (process.env.NODE_ENV === \"production\") {\n  const clearDBUrl = process.env.CLEARDB_DATABASE_URL;\n\n  if (!clearDBUrl) {\n    console.error(\"CLEARDB_DATABASE_URL is not defined\");\n    throw new Error(\"CLEARDB_DATABASE_URL is not defined\");\n  }\n  try {\n    const _url = new url.URL(clearDBUrl);\n    const hostname = _url.hostname;\n    const username = _url.username;\n    const password = _url.password;\n    const pathname = _url.pathname;\n    const database = pathname.slice(1); // Remove leading '/'\n\n    connection = mysql.createPool({\n      host: hostname,\n      user: username,\n      password: password,\n      database: database,\n    });\n\n    // Log when a connection is established\n    connection.getConnection((err, conn) => {\n      if (err) {\n        console.error(\"Error connecting to ClearDB:\", err);\n      } else {\n        console.log(\"Successfully connected to ClearDB.\");\n        conn.release(); // Release the connection back to the pool\n      }\n    });\n    console.log(\"Database connection pool created for ClearDB.\");\n  } catch (error) {\n    console.error(\"Error parsing ClearDB URL:\", error);\n  }\n\n  // If not prod(ClearDB), then dev (local MySQL)\n} else {\n  console.log(\"Environment: Development\");\n  connection = mysql.createPool(config.mysql);\n  console.log(\"Database connection pool created for local MySQL.\");\n}\n\nexport default connection; // import connection to utils (wrap in promise)> export as query\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,oBAAoB,CAAC,CAAC;AACzC,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,OAAOC,GAAG,MAAM,KAAK,CAAC,CAAC;;AAEvB,IAAIC,UAAU;;AAEd,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzC,IAAMC,UAAU,GAAGH,OAAO,CAACC,GAAG,CAACG,oBAAoB;;EAEnD,IAAI,CAACD,UAAU,EAAE;IACfE,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;IACpD,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;EACxD;EACA,IAAI;IACF,IAAMC,IAAI,GAAG,IAAIV,GAAG,CAACW,GAAG,CAACN,UAAU,CAAC;IACpC,IAAMO,QAAQ,GAAGF,IAAI,CAACE,QAAQ;IAC9B,IAAMC,QAAQ,GAAGH,IAAI,CAACG,QAAQ;IAC9B,IAAMC,QAAQ,GAAGJ,IAAI,CAACI,QAAQ;IAC9B,IAAMC,QAAQ,GAAGL,IAAI,CAACK,QAAQ;IAC9B,IAAMC,QAAQ,GAAGD,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEpChB,UAAU,GAAGF,KAAK,CAACmB,UAAU,CAAC;MAC5BC,IAAI,EAAEP,QAAQ;MACdQ,IAAI,EAAEP,QAAQ;MACdC,QAAQ,EAAEA,QAAQ;MAClBE,QAAQ,EAAEA;IACZ,CAAC,CAAC;;IAEF;IACAf,UAAU,CAACoB,aAAa,CAAC,UAACC,GAAG,EAAEC,IAAI,EAAK;MACtC,IAAID,GAAG,EAAE;QACPf,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEc,GAAG,CAAC;MACpD,CAAC,MAAM;QACLf,OAAO,CAACiB,GAAG,CAAC,oCAAoC,CAAC;QACjDD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;MAClB;IACF,CAAC,CAAC;IACFlB,OAAO,CAACiB,GAAG,CAAC,+CAA+C,CAAC;EAC9D,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EACpD;;EAEA;AACF,CAAC,MAAM;EACLD,OAAO,CAACiB,GAAG,CAAC,0BAA0B,CAAC;EACvCvB,UAAU,GAAGF,KAAK,CAACmB,UAAU,CAACpB,MAAM,CAACC,KAAK,CAAC;EAC3CQ,OAAO,CAACiB,GAAG,CAAC,mDAAmD,CAAC;AAClE;;AAEA,eAAevB,UAAU,CAAC,CAAC","ignoreList":[]}