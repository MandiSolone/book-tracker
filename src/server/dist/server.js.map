{"version":3,"file":"server.js","names":["_express","_interopRequireDefault","require","_morgan","_cors","_index","_config","_errorHandler","_auth","_passport","_expressSession","_auth2","_passportGoogleOauth","app","express","use","session","secret","config","oauth","sessionSecret","resave","saveUninitialized","cookie","secure","passport","initialize","json","corsOptions","origin","process","env","CLIENT_URL","credentials","cors","morgan","GoogleStrategy","clientID","googleClientId","clientSecret","googleClientSecret","callbackURL","GOOGLE_CALLBACK_URL","googleAuthCallback","serializeUser","deserializeUser","apiRouter","authRouter","errorHandler","listen","port","console","log","concat"],"sources":["../server.js"],"sourcesContent":["import express from \"express\";\nimport morgan from \"morgan\"; // For logging\nimport cors from \"cors\";\nimport apiRouter from \"./routes/index\"; // Aggregated routes\nimport config from \"./config\"; // the config file\nimport { errorHandler } from \"./middlewares/errorHandler\";\n//OAuth\nimport authRouter from \"./routes/auth.routes\"; // Import the new auth routes\nimport passport from \"passport\"; // From auth.routes\nimport session from \"express-session\";\nimport {\n  googleAuthCallback,\n  serializeUser,\n  deserializeUser,\n} from \"./controllers/auth.controller\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\n\nconst app = express();\n\n// OAuth Set up session middleware\n// Has to be at the top, before initalizing Passport and defining any routes\napp.use(\n  session({\n    secret: config.oauth.sessionSecret, // Use session secret\n    resave: false,\n    saveUninitialized: true,\n    cookie: { secure: false }, // Set true in production if using HTTPS\n  })\n);\n\n// Initialize Passport\napp.use(passport.initialize());\napp.use(passport.session());\n\n// Middleware\n// Parses inc req and attaches JSON to body parameter of the request object\napp.use(express.json());\n\n// Enables incoming requests from cors origin domains\n// CORS is a mechanism that allows restricted resources on a web page to be requested from another domain outside the domain from which the resource originated. By specifying an exact origin, you allow requests only from that domain, while blocking others.\nconst corsOptions = {\n  origin: process.env.CLIENT_URL || \"http://localhost:3000\", // React app URL\n  credentials: true, // Allow credentials to be sent\n};\napp.use(cors(corsOptions));\n\n// Logs incoming request information to the dev console (url, resp, req)\napp.use(morgan(\"dev\"));\n\n// Passport configuration for Google OAuth\npassport.use(\n  new GoogleStrategy(\n    {\n      clientID: config.oauth.googleClientId,\n      clientSecret: config.oauth.googleClientSecret,\n      callbackURL: process.env.GOOGLE_CALLBACK_URL, // Google Callback URL in .env\n    },\n    googleAuthCallback\n  )\n);\n\n// Serialize and deserialize user\npassport.serializeUser(serializeUser);\npassport.deserializeUser(deserializeUser);\n\n// Directs all routes starting with /api to the top level api express router http://localhost:8080/api/...\napp.use(\"/api\", apiRouter);\n// Attach the auth router\napp.use(authRouter);\n// Default Error handler middleware\napp.use(errorHandler);\n\n// Bind the app to a specified port\n// You can access your app at http://localhost:<port>\napp.listen(config.port || 8080, () =>\n  console.log(`Server listening on port ${config.port}...`)\n);\n\n// In dev create-react-app's built in server handles these routes (everything) but in deployment you need these to ensure app can serve static files and client-side routing works correctly\n\n// /**\n//  * Directs incoming static asset requests to the public folder\n//  */\n\n// app.use(express.static(join(__dirname, \"../client/build\")));\n\n// /**\n//  * Sends the react app index.html for page requests\n//  * Only needed in production when you are not using the react dev server\n//  */\n\n// app.use((req, res, next) => {\n//   try {\n//     res.sendFile(join(__dirname, \"../client/build/index.html\"));\n//   } catch (error) {\n//     next(error);\n//   }\n// });\n"],"mappings":"kGAAA,IAAAA,QAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,OAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,KAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,MAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,OAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,aAAA,GAAAL,OAAA;;AAEA,IAAAM,KAAA,GAAAP,sBAAA,CAAAC,OAAA;AACA,IAAAO,SAAA,GAAAR,sBAAA,CAAAC,OAAA;AACA,IAAAQ,eAAA,GAAAT,sBAAA,CAAAC,OAAA;AACA,IAAAS,MAAA,GAAAT,OAAA;;;;;AAKA,IAAAU,oBAAA,GAAAV,OAAA,4BAAqE,CAdxC;AAEW;AACT;AAE/B;AAC+C;AACd;AASjC,IAAMW,GAAG,GAAG,IAAAC,mBAAO,EAAC,CAAC,CAAC,CAEtB;AACA;AACAD,GAAG,CAACE,GAAG,CACL,IAAAC,0BAAO,EAAC,EACNC,MAAM,EAAEC,kBAAM,CAACC,KAAK,CAACC,aAAa,EAAE;MACpCC,MAAM,EAAE,KAAK;MACbC,iBAAiB,EAAE,IAAI;MACvBC,MAAM,EAAE,EAAEC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAE;IAC7B,CAAC;AACH,CAAC;;AAED;AACAX,GAAG,CAACE,GAAG,CAACU,oBAAQ,CAACC,UAAU,CAAC,CAAC,CAAC;AAC9Bb,GAAG,CAACE,GAAG,CAACU,oBAAQ,CAACT,OAAO,CAAC,CAAC,CAAC;;AAE3B;AACA;AACAH,GAAG,CAACE,GAAG,CAACD,mBAAO,CAACa,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACA;AACA,IAAMC,WAAW,GAAG;EAClBC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,UAAU,IAAI,uBAAuB,EAAE;EAC3DC,WAAW,EAAE,IAAI,CAAE;AACrB,CAAC;AACDpB,GAAG,CAACE,GAAG,CAAC,IAAAmB,gBAAI,EAACN,WAAW,CAAC,CAAC;;AAE1B;AACAf,GAAG,CAACE,GAAG,CAAC,IAAAoB,kBAAM,EAAC,KAAK,CAAC,CAAC;;AAEtB;AACAV,oBAAQ,CAACV,GAAG;EACV,IAAIqB,6BAAc;IAChB;MACEC,QAAQ,EAAEnB,kBAAM,CAACC,KAAK,CAACmB,cAAc;MACrCC,YAAY,EAAErB,kBAAM,CAACC,KAAK,CAACqB,kBAAkB;MAC7CC,WAAW,EAAEX,OAAO,CAACC,GAAG,CAACW,mBAAmB,CAAE;IAChD,CAAC;IACDC;EACF;AACF,CAAC;;AAED;AACAlB,oBAAQ,CAACmB,aAAa,CAACA,oBAAa,CAAC;AACrCnB,oBAAQ,CAACoB,eAAe,CAACA,sBAAe,CAAC;;AAEzC;AACAhC,GAAG,CAACE,GAAG,CAAC,MAAM,EAAE+B,iBAAS,CAAC;AAC1B;AACAjC,GAAG,CAACE,GAAG,CAACgC,gBAAU,CAAC;AACnB;AACAlC,GAAG,CAACE,GAAG,CAACiC,0BAAY,CAAC;;AAErB;AACA;AACAnC,GAAG,CAACoC,MAAM,CAAC/B,kBAAM,CAACgC,IAAI,IAAI,IAAI,EAAE;IAC9BC,OAAO,CAACC,GAAG,6BAAAC,MAAA,CAA6BnC,kBAAM,CAACgC,IAAI,QAAK,CAAC;AAC3D,CAAC;;AAED;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]}