{"version":3,"file":"server.js","names":["express","morgan","cors","path","fileURLToPath","dirname","apiRouter","config","errorHandler","passport","session","connectRedis","RedisStore","createClient","Strategy","GoogleStrategy","authRouter","googleAuthCallback","serializeUser","deserializeUser","redisUrl","process","env","REDISCLOUD_URL","redisClient","url","console","log","connect","then","app","redisStore","client","use","store","secret","oauth","sessionSecret","resave","saveUninitialized","cookie","secure","NODE_ENV","httpOnly","testRedisConnection","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","value","wrap","_callee$","_context","prev","next","set","get","sent","concat","t0","error","stop","apply","arguments","initialize","json","corsOptions","origin","CLIENT_URL","credentials","clientID","googleClientId","clientSecret","googleClientSecret","callbackURL","GOOGLE_CALLBACK_URL","__filename","import","meta","__dirname","staticPath","join","req","res","sendFile","listen","port","err"],"sources":["../server.js"],"sourcesContent":["import express from \"express\";\nimport morgan from \"morgan\"; // For logging\nimport cors from \"cors\";\nimport path from \"path\";\nimport { fileURLToPath } from 'url'; \nimport { dirname } from 'path';\nimport apiRouter from \"./routes/index.js\"; // Aggregated routes\nimport config from \"./config/index.js\"; // the config file // mysql, port, oauth\nimport { errorHandler } from \"./middlewares/errorHandler.js\";\n//OAuth\nimport passport from \"passport\"; // From auth.routes\nimport session from \"express-session\"; // Dev & Prod session stors for user info\n// import Redis from 'redis'; //Production Middleware to handle user auth storage \nimport connectRedis from 'connect-redis';\nimport RedisStore from \"connect-redis\";\nimport { createClient } from 'redis';\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport authRouter from \"./routes/auth.routes.js\"; // Import the new auth routes\nimport {  // resp from mysqlUrls> promise>query>UserDbTable>output here\n  googleAuthCallback,\n  serializeUser,\n  deserializeUser,\n} from \"./controllers/auth.controller.js\";\n\n\n// Determine Redis URL based on environment\nconst redisUrl = process.env.REDISCLOUD_URL || 'redis://localhost:6379';\n\n// Create Redis client\nconst redisClient = createClient({\n  url: redisUrl\n});\n\nconsole.log('Redis URL:', redisUrl);\n\n// Connect to the Redis client\nawait redisClient.connect()\n    .then(() => {\n      console.log('Connected to Redis');\n\n  // Initialize your Express app here\n  const app = express();\n\n  // Now you can create the RedisStore\n  // const RedisStore = connectRedis(session);\n  // const redisStore = require(\"connect-redis\").default;\n  const redisStore = new RedisStore({ client: redisClient });\n\n// OAuth session middleware\n// Has to be at the top, before initalizing Passport and defining any routes\napp.use(\n  session({\n    store: redisStore,\n    secret: config.oauth.sessionSecret, // Use session secret\n    resave: false,\n    saveUninitialized: true,\n    // cookie: { secure: false }, // Set true in production if using HTTPS\n    cookie: {\n      secure: process.env.NODE_ENV === 'production', // Set secure to true only in production\n      httpOnly: true, // Recommended for security\n    }\n  })\n);\n\n        // Async function to test Redis connection\n        const testRedisConnection = async () => {\n          try {\n              await redisClient.set('test_key', 'test_value');\n              const value = await redisClient.get('test_key');\n              console.log(`Value from Redis: ${value}`); // Should output: test_value\n          } catch (error) {\n              console.error('Redis Operation Error', error);\n          }\n      };\n\n      // Call the async function\n      testRedisConnection();\n\n\n// Initialize Passport Library\napp.use(passport.initialize());\napp.use(passport.session());\n\n// Middleware\n// Parses inc req and attaches JSON to body parameter of the request object\napp.use(express.json());\n\n// Enables incoming requests from cors origin domains\n// CORS is a mechanism that allows restricted resources on a web page to be requested from another domain outside the domain from which the resource originated. By specifying an exact origin, you allow requests only from that domain, while blocking others.\n// Good for using multi domains\nconst corsOptions = {\n  origin: process.env.CLIENT_URL || \"http://localhost:3000\", // React app URL\n  credentials: true, // Allow credentials to be sent\n};\napp.use(cors(corsOptions));\n\n// Logs incoming request information to the dev console (url, resp, req)\napp.use(morgan(\"dev\"));\n\n// Passport configuration for Google OAuth\npassport.use(\n  new GoogleStrategy(\n    {\n      clientID: config.oauth.googleClientId, //config/index.js \n      clientSecret: config.oauth.googleClientSecret,\n      callbackURL: process.env.GOOGLE_CALLBACK_URL, // Google Callback URL in .env\n    },\n    googleAuthCallback\n  )\n);\n\n// Serialize and deserialize user\n//add these lines after session middleware and before defining routes\npassport.serializeUser(serializeUser);\npassport.deserializeUser(deserializeUser);\n\n// Define routers\napp.use(\"/api\", apiRouter);\napp.use(\"/auth\", authRouter);\n\n// Serve static files from the React app (front end) __dirname\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst staticPath = path.join(__dirname, \"..\", \"../client/build\");\nconsole.log(\"Serving static files from:\", staticPath);\napp.use(express.static(staticPath));\n\n// Handle GET all requests to serve the React app (front end)\napp.get(\"*\", (req, res) => {\n  res.sendFile(path.join(staticPath, \"index.html\"));\n});\n\n// Default Error handler middleware, place code at the bottom \napp.use(errorHandler);\n\n// Bind the app to a specified port\napp.listen(config.port || 8080, () =>\n  console.log(`Server listening on port ${config.port}...`)\n);\n    })\n    .catch(err => console.error('Redis Client Connection Error', err));"],"mappings":"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","ignoreList":[]}